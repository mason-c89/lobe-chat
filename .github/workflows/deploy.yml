name: 部署到服务器

on:
  push:
    branches:
      - main  # 根据实际需求修改触发部署的分支

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 第一步：检出代码
      - name: 检出代码
        uses: actions/checkout@v2

      # 第二步：设置 SSH 密钥
      - name: 设置 SSH 密钥
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}

      # 第三步：登录到阿里云 Docker 镜像仓库
      - name: 登录到阿里云 Docker 镜像仓库
        run: |
          echo ${{ secrets.ALIYUN_DOCKER_PASSWORD }} | docker login --username=${{ secrets.ALIYUN_USERNAME }} --password-stdin registry.cn-hangzhou.aliyuncs.com
          # 检查登录是否成功
          if [ $? -ne 0 ]; then
            echo "Docker 登录失败！" && exit 1
          fi

      # 第四步：检查 Docker 镜像是否已存在
      - name: 检查 Docker 镜像是否已存在
        run: |
          IMAGE_TAG="lobechat-${{ github.sha }}"
          if docker pull registry.cn-hangzhou.aliyuncs.com/jie-images/practice:$IMAGE_TAG; then
            echo "镜像 $IMAGE_TAG 已存在，跳过构建步骤。"
            exit 0
          else
            echo "镜像 $IMAGE_TAG 不存在，继续构建镜像。"
          fi

      # 第五步：构建 Docker 镜像
      - name: 构建 Docker 镜像
        run: |
          docker build -t lobechat:${{ github.sha }} .
          # 确保镜像构建成功
          if [ $? -ne 0 ]; then
            echo "Docker 镜像构建失败！" && exit 1
          fi

      # 第六步：给 Docker 镜像打标签
      - name: 给 Docker 镜像打标签
        run: |
          IMAGE_TAG="lobechat-${{ github.sha }}"
          docker tag lobechat:${{ github.sha }} registry.cn-hangzhou.aliyuncs.com/jie-images/practice:$IMAGE_TAG
          echo "已将 Docker 镜像打标签为: $IMAGE_TAG"

      # 第七步：将 Docker 镜像推送到阿里云镜像仓库
      - name: 将 Docker 镜像推送到阿里云镜像仓库
        run: |
          IMAGE_TAG="lobechat-${{ github.sha }}"
          docker push registry.cn-hangzhou.aliyuncs.com/jie-images/practice:$IMAGE_TAG
          # 确保推送成功
          if [ $? -ne 0 ]; then
            echo "Docker 镜像推送失败！" && exit 1
          fi
          
      # 第八步：在服务器上部署 Docker 容器
      - name: 在服务器上部署 Docker 容器
        run: |
          IMAGE_TAG="lobechat-${{ github.sha }}"
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_SSH_USER }}@${{ secrets.SERVER_IP }} "
            docker pull registry.cn-hangzhou.aliyuncs.com/jie-images/practice:$IMAGE_TAG &&
            docker stop lobe-chat-database || true &&
            docker rm lobe-chat-database || true &&
            docker run -it -d --name lobe-chat-database -p 3210:3210 \
              -e NEXT_PUBLIC_SERVICE_MODE=${{ secrets.NEXT_PUBLIC_SERVICE_MODE }} \
              -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
              -e KEY_VAULTS_SECRET=${{ secrets.KEY_VAULTS_SECRET }} \
              -e NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }} \
              -e CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }} \
              -e CLERK_WEBHOOK_SECRET=${{ secrets.CLERK_WEBHOOK_SECRET }} \
              -e S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }} \
              -e S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }} \
              -e S3_BUCKET=${{ secrets.S3_BUCKET }} \
              -e S3_ENDPOINT=${{ secrets.S3_ENDPOINT }} \
              -e S3_PUBLIC_DOMAIN=${{ secrets.S3_PUBLIC_DOMAIN }} \
              registry.cn-hangzhou.aliyuncs.com/jie-images/practice:$IMAGE_TAG"
